from collections import deque,defaultdict
class Solution:
    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:
        # q=deque()
        d=defaultdict(set)
        
        for i in dislikes:
            d[i[0]].add(i[1])
            d[i[1]].add(i[0])
            
        def bipartite(src):
            q=deque()
            visited[src]=1
            q.append(src)
            while q:
                c=q.popleft()
                for i in d[c]:
                    if visited[i]==-1:
                        visited[i]=1-visited[c]
                        q.append(i)
                    else:
                        if visited[i]==visited[c]:
                            return False
            return True
        visited=[-1]*(N+1)
        for i in range(1,N+1):
            if visited[i]==-1:
                if not bipartite(i):
                    return False
        return True
